generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  firstName     String?     @map("first_name")
  lastName      String?     @map("flast_name")
  createdAt     DateTime    @default(now())
  password      String?
  updatedAt     DateTime    @default(now()) @updatedAt
  accessLevel   AccessLevel @default(CLIENT) @map("access_level")
  accounts      Account[]
  sessions      Session[]
  websites      Website[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Website {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now()) @map("created_at")
  url            String          @unique
  title          String
  public         Boolean         @default(false)
  ownerId        String?         @map("owner_id")
  owner          User?           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  certifications Certification[]
  eductions      Eduction[]
  experiences    Experience[]
  galleries      Gallery[]
  generals       General[]
  projects       Project[]
  skills         Skill[]

  @@map("website")
}

model CertificationBadge {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now()) @map("created_at")
  title           String
  image           String
  certificationId String?        @map("certification_id")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at")
  certification   Certification? @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  @@map("certificationbadge")
}

model Certification {
  id           String               @id @default(cuid())
  createdAt    DateTime             @default(now()) @map("created_at")
  displayTitle String
  title        String
  link         String
  type         Int                  @default(0)
  websiteId    String?              @map("website_id")
  updatedAt    DateTime             @default(now()) @updatedAt @map("updated_at")
  website      Website?             @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  badges       CertificationBadge[]

  @@map("certification")
}

model Eduction {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map("created_at")
  title      String
  schoolName String
  credit     String
  graduated  String
  websiteId  String?  @map("website_id")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  website    Website? @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("education")
}

model ExperienceRole {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now()) @map("created_at")
  title        String
  description  String
  experienceId String?     @map("experience_id")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
  experience   Experience? @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@map("expierencerole")
}

model Experience {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now()) @map("created_at")
  displayTitle String
  title        String
  subtitle     String
  when         String
  type         Int              @default(0)
  websiteId    String?          @map("website_id")
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at")
  website      Website?         @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  roles        ExperienceRole[]

  @@map("experience")
}

model GalleryImage {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  file        String
  description String
  galleryId   String?  @map("gallery_id")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  gallery     Gallery? @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@map("galleryimage")
}

model Gallery {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now()) @map("created_at")
  title     String
  type      Int            @default(0)
  websiteId String?        @map("website_id")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")
  website   Website?       @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  images    GalleryImage[]

  @@map("gallery")
}

model GeneralSocial {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  name      String
  url       String
  className String
  generalId String?  @map("general_id")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  general   General? @relation(fields: [generalId], references: [id], onDelete: Cascade)

  @@map("generalsocial")
}

model General {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now()) @map("created_at")
  year            String
  name            String
  occupation      String
  description     String
  image           String?
  bio             String
  email           String?
  personalWebsite String?
  resumeDownload  String?
  region          String?
  province        String?
  country         String?
  websiteId       String?         @map("website_id")
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at")
  website         Website?        @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  socials         GeneralSocial[]

  @@map("general")
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  title       String
  description String
  image       String
  url         String
  type        Int      @default(0)
  websiteId   String?  @map("website_id")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  website     Website? @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("project")
}

model SkillLanguage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  title     String
  list      String[]
  Skill     Skill[]

  @@map("skilllanguage")
}

model Skill {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now()) @map("created_at")
  title           String
  type            Int            @default(0)
  list            String[]
  websiteId       String?        @map("website_id")
  skillLanguageId Int?           @map("skill_language_id")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at")
  languages       SkillLanguage? @relation(fields: [skillLanguageId], references: [id])
  website         Website?       @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("skill")
}

enum AccessLevel {
  ROOT
  ADMIN
  CLIENT
  GUEST
}
